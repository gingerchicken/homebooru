# Rate limit zoning etc.
include snippets/sec-ratelimit.conf;

server {
    listen       443 ssl;
    server_name  _;

    # Include ssl configuration
    include snippets/ssl-signed.conf;
    include snippets/ssl-params.conf;

    # Maximum size of the request body to be 8G
    client_max_body_size 8G;

    # TODO add error pages etc.

    # Include host validation rules
    include snippets/sec-validate.conf;

    # Django forward
    location @django_proxy {
        # Rate limit requests
        include snippets/sec-apply-ratelimit.conf;

        # Forward to the Django docker container
        proxy_pass http://web:8000;

        # gunicorn recommended settings
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Say that it is behind a proxy
        # The idea is that if it is not a valid host nginx should have rejected it, not Django.
        proxy_set_header Host nginx;

        # I am not sure if I should do this or not but as I said, if it is not a valid host, nginx should have rejected it.
        proxy_set_header Origin $scheme://nginx;
        proxy_set_header Referer $scheme://nginx/$request_uri;

        # Send the actual info etc.
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Real-Origin $scheme://$host;
        proxy_set_header X-Real-Port $remote_port;
        proxy_set_header X-Real-Proto $scheme;


        # Prevent nginx "doing something" clever with redirects
        proxy_redirect off;
    }

    # Serve the booru storage files
    #   (While still making it look like the storage folder is on the site's root)

    # Serve original images
    location /media/ {
        alias /storage/media/;
        allow all;
    }

    # Serve downscaled samples
    location /samples/ {
        alias /storage/samples/;
        allow all;
    }

    # Serve thumbnails
    location /thumbnails/ {
        alias /storage/thumbnails/;
        allow all;
    }

    # Django static files
    location /static/ {
        alias /static/;
        allow all;
    }

    # Serve the site
    location / {
        # Try to serve the requested page as a static file first.
        try_files $uri @django_proxy;
    }
}

# Redirect to the HTTPS version of the site
server {
    listen       80;
    server_name  _;

    return 301 https://$host$request_uri;
}